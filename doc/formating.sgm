<!-- $Id: formating.sgm,v 1.4 2004/02/25 14:59:42 chet99 Exp $ -->
<chapter label="4" id="formating">
	<title>Formatting</title>
	<sect1>
		<title>Foreground Color</title>
		<para>
			color = "exprS"
		</para>
		<para>
			exprS must be either a valid color name or hex color triplet ie 0xFFFFFF.
		</para>
		<para>
			Use the forground color to change the color for literals and fields
		</para>
	</sect1>
	<sect1>
		<title>Background Color</title>
		<para>
			bgcolor = "exprS"
		</para>
		<para>
			exprS must be either a valid color name or hex color triplet ie 0xFFFFFF.
		</para>
		<para>
			Use the background color to change the color for literals and fields
		</para>
	</sect1>
	<sect1>
		<title>COLORS IN GENERAL</title>
		<para>
			Colors must be a STRING an specified as either a named color. See chart for color names.
		</para>
		<para>
			<inlinemediaobject>
				<imageobject>
					<imagedata fileref="IMAGES/namedcolors.png" align=center>
				</imageobject>
			</inlinemediaobject>		
		</para>
		<para>
			OR as a hex color tripplet like 0xFFFFFF
		</para>
		<para>
			so in the XML it would be either color="'0xFFFFFF'" OR color="'red'"
		</para>
	</sect1>
	<sect1>
		<title>Format Strings</title>
		<para>
			Yup RLIB has them. They are very similar to C. Numbers, Dates, or Strings.
			Here is the neat part.  If you mess up format strings, rlib will put an error message in the field.  
			They are...
		</para>	
		<para>
			!ERR_F means that rlib was not given a format string and can't automatically make something of your data
		</para>
		<para>
			!ERR_F_D means you asked rlib to format as a number but it was not given a number data type
		</para>
		<para>
			!ERR_F_S means you asked rlib to format as a string but it was not given a string data type
		</para>
		<para>
			!ERR_F_F means you asked rlib could not interperate your format string expression / or what it interpreted it to was not a string
		</para>			
		<para>
			It works a lot like c. You can do stuff like "'You have %d apples'"
		</para>			
		<para>
			If you do something like %$5.2d this means put commas in so you will get 12,345.67
		</para>			
	</sect1>
	<sect1>
		<title>New Style Format Strings with "!" prefix</title>
		<para>
			The new style format strings can be intermixed with old style formatting and may be used anywhere a format string is needed.
			They provide locale aware formatting for date/time, money and numbers.
			The first 2 characters in the new format strings must begin with either "!@", "!$" or "!#", respectively.
			Following this is an appropriate 'C' style format string for one of the functions
			strftime, strfmon, or sprintf (for numbers).
			All numerics in the money and number format strings must be represented using the 'e', 'f' or 'g' format codes.
			For example "!#$.2g", "!$%n", "!@%m/%d/%Y" are valid format strings using the new style
			for a number, a money amount and a date.
			There are also additional error codes added	as follows:
		</para>
		<para>
			!ERR_DT_D means you asked rlib to format a date but the date field of the datetime is not set.
		</para>
		<para>
			!ERR_DT_T means you asked rlib to format a time but the time field of the datetime is not set.
		</para>
		<para>
			!ERR_DT_NO means there were no valid format codes in a format string for a date/time.
		</para>
	</sect1>		
	<sect1>
		<title>String Format Strings</title>
		<para>
			Exactly like c. %[optional number]s where optional number is how big to make the string
		</para>	
	</sect1>
	<sect1>
		<title>Number Format Strings</title>
		<para>
			Close to c. %[optional number 1][.][optional number 2]d ... where optional number 1 is how big should the left side be
			and optional number 2 is how many decimal places... 
		</para>	
	</sect1>
	<sect1>
		<title>Number Format Strings (!# format)</title>
		<para>
			Identical to C. All numbers must be represented by the e, f or g format types.
		</para>	
		<para>
			Please refer to your systems printf formatting codes.
		</para>
	</sect1>
	<sect1>
		<title>Date Format Strings (all including !@ format)</title>
		<para>
			Date codes and time codes should be consecutive, i.e. don't have a timecode a datecode and then another timecode.
			This will not work. Rlib internally splits the datetime string into a date format string and a time format string.
			It uses the first transition from date-to-time or time-to-date as the split point for the date/time.
		</para>
		<para>
			Dates from 1/1/1 through 1/1/8000+ can be represented.
		</para>			
		<para>
	       %a     The abbreviated weekday name according to the current locale.
		</para>	
		<para>
	       %A     The full weekday name according to the current locale.
		</para>	
		<para>
	       %A     The full weekday name according to the current locale.
		</para>	
		<para>
   	    %b     The abbreviated month name according to the current locale.
		</para>	
		<para>
	       %B     The full month name according to the current locale.
		</para>	
		<para>
	       %c     The preferred date and time representation for the current locale.
		</para>	
		<para>
	       %C     The century number (year/100) as a 2-digit integer. (SU)
		</para>	
		<para>
	       %d     The day of the month as a decimal number (range 01 to 31).
		</para>	
		<para>
   	    %D     Equivalent  to  %m/%d/%y. (Yecch - for Americans only.  Americans should note that in other coun-
	           tries %d/%m/%y is rather common. This means that in international context this format is  ambigu-
              ous and should not be used.) (SU)
		</para>	
		<para>
	       %e     Like  %d,  the  day  of the month as a decimal number, but a leading zero is replaced by a space.
              (SU)
		</para>	
		<para>
	       %E     Modifier: use alternative format, see below. (SU)
		</para>	
		<para>
	       %F     Equivalent to %Y-%m-%d (the ISO 8601 date format). (C99)
		</para>	
		<para>
	       %G     The ISO 8601 year with century as a decimal number.  The 4-digit year corresponding  to  the  ISO
              week number (see %V).  This has the same format and value as %y, except that if the ISO week num-
              ber belongs to the previous or next year, that year is used instead. (TZ)
		</para>	
		<para>
	       %g     Like %G, but without century, i.e., with a 2-digit year (00-99). (TZ)
		</para>	
		<para>
	      %h     Equivalent to %b. (SU)
 		</para>	
		<para>
	       %H     The hour as a decimal number using a 24-hour clock (range 00 to 23).
		</para>	
		<para>
	       %I     The hour as a decimal number using a 12-hour clock (range 01 to 12).
		</para>	
		<para>
	       %j     The day of the year as a decimal number (range 001 to 366).
		</para>	
		<para>
	       %k     The hour (24-hour clock) as a decimal number (range 0 to 23); single digits  are  preceded  by  a
              blank. (See also %H.) (TZ)
		</para>	
		<para>
	       %l     The  hour  (12-hour  clock)  as a decimal number (range 1 to 12); single digits are preceded by a
              blank. (See also %I.) (TZ)
		</para>	
		<para>
	       %m     The month as a decimal number (range 01 to 12).
		</para>	
		<para>
	       %M     The minute as a decimal number (range 00 to 59).
		</para>	
		<para>
	       %n     A newline character. (SU)
		</para>	
		<para>
	       %O     Modifier: use alternative format, see below. (SU)
		</para>	
		<para>
   	    %p     Either `AM' or `PM' according to the given time value, or the corresponding strings for the  cur-
	           rent locale.  Noon is treated as `pm' and midnight as `am'.
		</para>	
		<para>
	       %P     Like %p but in lowercase: `am' or `pm' or a corresponding string for the current locale. (GNU)
		</para>	
		<para>
	       %r     The time in a.m. or p.m. notation.  In the POSIX locale this is equivalent to `%I:%M:%S %p'. (SU)
		</para>	
		<para>
	       %R     The time in 24-hour notation (%H:%M). (SU) For a version including the seconds, see %T below.
		</para>	
		<para>
	       %s     The number of seconds since the Epoch, i.e., since 1970-01-01 00:00:00 UTC. (TZ)
		</para>	
		<para>
	       %S     The second as a decimal number (range 00 to 61).
		</para>	
		<para>
	       %t     A tab character. (SU)
		</para>	
		<para>
	       %T     The time in 24-hour notation (%H:%M:%S). (SU)
		</para>	
		<para>
	       %u     The day of the week as a decimal, range 1 to 7, Monday being 1.  See also %w. (SU)
		</para>	
		<para>
   	    %U     The week number of the current year as a decimal number, range 00 to 53, starting with the  first
	       Sunday as the first day of week 01. See also %V and %W.
		</para>	
		<para>
	       %V     The ISO 8601:1988 week number of the current year as a decimal number, range 01 to 53, where week
              1 is the first week that has at least 4 days in the current year, and with Monday  as  the  first
              day of the week. See also %U and %W. (SU)
		</para>	
		<para>
	       %w     The day of the week as a decimal, range 0 to 6, Sunday being 0.  See also %u.
		</para>	
		<para>
	       %W     The  week number of the current year as a decimal number, range 00 to 53, starting with the first
              Monday as the first day of week 01.
		</para>	
		<para>
	       %x     The preferred date representation for the current locale without the time.
		</para>	
		<para>
	       %X     The preferred time representation for the current locale without the date.
		</para>	
		<para>
	       %y     The year as a decimal number without a century (range 00 to 99).
		</para>	
		<para>
	       %Y     The year as a decimal number including the century.
		</para>	
		<para>
	       %z     The time-zone as hour offset from GMT.  Required to emit RFC822-conformant dates (using  "%a,  %d
              %b %Y %H:%M:%S %z"). (GNU)
		</para>	
		<para>
	       %Z     The time zone or name or abbreviation.
		</para>	
		<para>
	       %+     The date and time in date(1) format. (TZ)
		</para>	
		<para>
	       %%     A literal `%' character.
		</para>	
	</sect1>
	<sect1>
		<title>Money Format String (!$ format)</title>
		<para>
				The money formatter is locale aware and will use appropriate symbols and formats for the designated locale.
				It is a string in the form:
				%[=f ^ ( + ! -][fieldwidth][#leftprecision][.rightprecision][n or i]
				[] indicates optional sections.
		</para>
		<para>
			=f	f is a character to use as the numeric fill character. Default is ' '.
		</para>
		<para>
			^	ignore grouping if specified in the locale. This is usually thousands groupings.
		</para>
		<para>
			( 	Put negative amounts in ().
		</para>
		<para>
			+	Show + sign on positive numbers.
		</para>
		<para>
			!	Omit the currency symbol.
		</para>
		<para>
			-	Left justify all fields.
		</para>
		<para>
			n	Display in national format.	Like: $1.25
		</para>
		<para>
			i	Display in international format. Like USD 1.25
		</para>
		<para>
			%%	represents a % sign within the format specification string.
		</para>
	</sect1>
	<sect1>
		<title>Default Format Strings</title>
		<para>
			For STRING it is "%s"
		</para>
		<para>
			for NUMBER it is "%d"
		</para>
		<para>
			for DATE it is "%m/%d/%Y"
		</para>
	</sect1>
</chapter>
