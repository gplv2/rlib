<chapter label="6" id="capi">
	<title>C API</title>
	<sect1>
		<title>rlib_init_with_environment</title>
		<para>
			rlib * rlib_init_with_environment(struct environment_filter *environment)
		</para>
		<para>
			Create an instance of RLIB.  You will normally pass NULL to init.  However.. at some point we need to better
			document what the environment_filter does... this is normally used for 3rd part bindings like PHP, PERL, or PYTHON.
		</para>
		<para>
			Returns a pointer to a <emphasis>rlib</emphasis>
		</para>
	</sect1>
	<sect1>
		<title>rlib_init</title>
		<para>
			rlib * rlib_init()
		</para>
		<para>
			calls rlib_init_environment with a NULL pointer
		</para>
		<para>
			Returns a pointer to a <emphasis>rlib</emphasis>
		</para>
	</sect1>
	<sect1>
		<title>rlib_add_datasource_mysql</title>
		<para>
			rlib_add_datasource_mysql(<emphasis>rlib * rlib_ptr</emphasis>, char *datasource_name, char *hostname, char *username, char *password, char *database)
		</para>
		<para>
			Add a mysql datasource.  The datasource_name is used in rlib_add_query_as to tell rlib which datasource to run
			the query with.
		</para>
		<para>
			This function is only available if rlib is compiled with mysql support.
		</para>
	</sect1>
	<sect1>
		<title>rlib_add_datasource_postgre</title>
		<para>
			rlib_add_datasource_postgre(<emphasis>rlib * rlib_ptr</emphasis>, char *datasource_name, char *connection_string)
		</para>
		<para>
			Add a postgre datasource.  The datasource_name is used in rlib_add_query_as to tell rlib which datasource to run
			the query with.  The connection_string is the standard postgre connection string.. which might contain user and password
			information, among other things.
		</para>
		<para>
			This function is only available if rlib is compiled with postgre support.
		</para>
	</sect1>
	<sect1>
		<title>rlib_add_datasource_odbc</title>
		<para>
			rlib_add_datasource_odbc(<emphasis>rlib * rlib_ptr</emphasis>, char *datasource_name, char *user_name, char *password)
		</para>
		<para>
			Add a odbc datasource.  The datasource_name is used in rlib_add_query_as to tell rlib which datasource to run
			the query with.  The user name and password are that of your database you are connecting to
		</para>
		<para>
			This function is only available if rlib is compiled with odbc support.
		</para>
	</sect1>
	<sect1>
		<title>rlib_add_datasource_xml</title>
		<para>
			rlib_add_datasource_xml(<emphasis>rlib * rlib_ptr</emphasis>, char *datasource_name)
		</para>
		<para>
			Adds a XML datasource to RLIB.  Pass XML files to rlib instead of queries.
		</para>
	</sect1>	
	<sect1>
		<title>rlib_add_query_as</title>
		<para>
			rlib_add_query_as(<emphasis>rlib * rlib_ptr</emphasis>, char *datasource_name, char *query, char *rlib_query_name)
		</para>
		<para>
			The query is added to an execution queue, but it is not executed at this time.  The name is important
			because you can reference result sets directly in your rlib xml files.  The first query added is assumed
			to be the main loop query.  The datasource name must match a datasource the your provided rlib, such as one
			of the mysql or postgre datasources.
		</para>
	</sect1>
	<sect1>
		<title>rlib_add_report</title>
		<para>
			rlib_add_report(<emphasis>rlib *rlib_ptr</emphasis>, char *rlib_xml_file)
		</para>
		<para>
			A report is added to the report execution queue but not compiled at this time.
		</para>
	</sect1>
	<sect1>
		<title>rlib_add_report_from_buffer</title>
		<para>
			rlib_add_report_from_buffer(<emphasis>rlib *rlib_ptr</emphasis>, char *xml_in_memory)
		</para>
		<para>
			A report is added to the report execution queue but not compiled at this time.
		</para>
	</sect1>
	<sect1>
		<title>rlib_set_output_format</title>
		<para>
			rlib_set_output_format(<emphasis>rlib *rlib_ptr</emphasis>, int type)
		</para>
		<para>
			Type can be one of the following: RLIB_FORMAT_PDF, RLIB_FORMAT_HTML, RLIB_FORMAT_TXT, RLIB_FORMAT_CSV
		</para>
	</sect1>
	<sect1>
		<title>rlib_set_output_format_from_text</title>
		<para>
			rlib_set_output_format_from_text(<emphasis>rlib *rlib_ptr</emphasis>, char *name)
		</para>
		<para>
			Type can be one of the following: "pdf", "html", "csv", "txt"
		</para>
	</sect1>	<sect1>
		<title>rlib_execute</title>
		<para>
			rlib_execute(<emphasis>rlib *rlib_ptr</emphasis>)
		</para>
		<para>
			Connects to the database, runs queries, compiles xmls and buffers up a report.
		</para>
	</sect1>
	<sect1>
		<title>rlib_get_content_type</title>
		<para>
			char *rlib_get_content_type(<emphasis>rlib *rlib_ptr</emphasis>)
		</para>
		<para>
			This will return a string content type Use it with the <emphasis>php header function</emphasis>.
			Even if you ask for a PDF you might not get a PDF because errors might occur. If this is the case, rlib
			defaults to html and sends out error messages.
		</para>
	</sect1>
	<sect1>
		<title>rlib_signal_connect</title>
		<para>
			rlib_signal_connect(<emphasis>rlib * rlib_ptr</emphasis>, int signal_number, int (*signal_function)(rlib *, void *), void * data);			
		</para>
		<para>
			Connect a user callback function to a RLIB Signal.  This is usally to manuipulate data and then refresh the datasource.
		</para>
	</sect1>
	<sect1>
		<title>rlib_signal_connect_string</title>
		<para>
			rlib_signal_connect(<emphasis>rlib * rlib_ptr</emphasis>, char *signal_name, int (*signal_function)(rlib *, void *), void * data);			
		</para>
		<para>
			Connect a user callback function to a RLIB Signal.  This is usally to manuipulate data and then refresh the datasource.
		</para>
	</sect1>
	<sect1>
		<title>rlib_query_refresh</title>
		<para>
			rlib_query_refresh(<emphasis>rlib * rlib_ptr</emphasis>);
		</para>
		<para>
			Causes RLIB to refresh all queries and put the row pointer back at the 1st row.
		</para>
	</sect1>
	<sect1>
		<title>rlib_set_output_parameter</title>
		<para>
			rlib_set_output_parameter(<emphasis>rlib * rlib_ptr</emphasis>, char *parameter, char *value);
		</para>
		<para>
			Set an output paramteter.  SEE OUTPUT PARAMETERS.
		</para>
	</sect1>
	<sect1>
		<title>rlib_spool</title>
		<para>
			rlib_spool(<emphasis>rlib * rlib_ptr</emphasis>)
		</para>
		<para>
			Rlib will send the output out stdout.
		</para>
	</sect1>
	<sect1>
		<title>rlib_get_output</title>
		<para>
			char * rlib_get_output(<emphasis>rlib * rlib_ptr</emphasis>)
		</para>
		<para>
			Returns the output buffer (COULD BE NON NULL TERMINATED STRING)
		</para>
	</sect1>
	<sect1>
		<title>rlib_get_output_length</title>
		<para>
			long rlib_get_output_length(<emphasis>rlib * rlib_ptr</emphasis>)
		</para>
		<para>
			Returns the length of the output buffer
		</para>
	</sect1>
	<sect1>
		<title>rlib_add_parameter</title>
		<para>
			int rlib_add_parameter(<emphasis>rlib *rlib_ptr</emphasis>, const char *name, const char *value)
		</para>
		<para>
			Adds the name/value pair to the memory parameters. Values added in this manner
			supercede values passed in the environment. The names are searched in a 
			case sensitive manner. Both name and value are stored by value, so
			the passed arguments do not need to persist after the call.
		</para>
	</sect1>
	<sect1>
		<title>rlib_free</title>
		<para>
			rlib_free(<emphasis>rlib *rlib_ptr</emphasis>)
		</para>
		<para>
			Free rlib's memory that it allocated
		</para>
	</sect1>
	<sect1>
		<title>rlib_add_resultset_follower</title>
		<para>
			rlib_add_resultset_follower(<emphasis>rlib *rlib_ptr</emphasis>, char *leader, char *follower)
		</para>
		<para>
			Adds the ability to have more then one main loop query.  leader and follower are the names of
			the queries you set in rlib_add_query_as.
		</para>
	</sect1>
	<sect1>
		<title>rlib_add_resultset_follower_n_to_1</title>
		<para>
			rlib_add_resultset_follower(<emphasis>rlib *rlib_ptr</emphasis>, char *leader, char *leader_field, char *follower, char *follower_field)
		</para>
		<para>
			Adds the ability to have more then one main loop query.  leader and follower are the names of
			the queries you set in rlib_add_query_as.  The leader_fields and follower_fields are normal RLIB expressions.
			Use this feature when the rows in the datasets are uneven and needs to be linked together using a common criteria.
		</para>
	</sect1>

	<sect1>
		<title>rlib_version</title>
		<para>
			char *rlib_version(void);
		</para>
		<para>
			Returns a string containing the version of RLIB being used.
		</para>
	</sect1>

	<sect1>
		<title>rlib_set_output_encoding(<emphasis>rlib *rlib_ptr</emphasis>, const char *encoding)</title>
		<para>
			Sets the output character encoding, overriding any encoding that is set in the current Locale.
			By default RLIB will use the character encoding indicated in the current Locale settings.
			All reports will use this encoding unless overriden by a call to rlib_set_report_output_encoding.
			If the encoding is NULL, or a null string, the output will be left in UTF-8 encoding.
		</para>
	</sect1>


	<sect1>
		<title>rlib_set_datasource_encoding(<emphasis>rlib *rlib_ptr</emphasis>, char *input_name, const char *encoding)</title>
		<para>
			Sets the output character encoding, overriding any encoding that is set in the current Locale.
			By default RLIB will use the character encoding indicated in the current Locale settings.
			All reports will use this encoding unless overriden by a call to rlib_set_report_output_encoding.
			If the encoding is NULL, or a null string, the output will be left in UTF-8 encoding.
		</para>
	</sect1>

	<sect1>
		<title>rlib_set_locale(<emphasis>rlib *rlib_ptr</emphasis>, const char *locale)</title>
		<para>
			Sets the locale to the passed locale. 
			The locale must be one of the values returned by the shell command:
			<emphasis>locale -a</emphasis>.
		</para>
		<para>
			Returns true if the locale was successfully set.
		</para>
	</sect1>


	<sect1>
		<title>rlib_graph_add_bg_region(<emphasis>rlib *rlib_ptr</emphasis>,char *graph_name, char *region_label, char *color, float start, float end)</title>
		<para>
			Add a region of color with a label to a graph.  Useful when the X axis is time and you want to indicate an event occured over that time.
		</para>
	</sect1>

	<sect1>
		<title>rlib_graph_clear_bg_region(<emphasis>rlib *rlib_ptr</emphasis>,char *graph_name)</title>
		<para>
			Remove regions. (Use if you are iterating graphs and have different X axis values)
		</para>
	</sect1>

	<sect1>
		<title>rlib_graph_set_x_minor_tick(<emphasis>rlib *rlib_ptr</emphasis>,char *graph_name, char *x_value)</title>
		<para>
			Set a x value on a graph as a minor tick
		</para>
	</sect1>

	<sect1>
		<title>rlib_graph_set_x_minor_tick_by_location(<emphasis>rlib *rlib_ptr</emphasis>,char *graph_name, int location)</title>
		<para>
			Set a x value on a graph as a minor tick.  Location starts at 0.
		</para>
	</sect1>

	<sect1>
		<title>SAMPLE</title>
		<para>
			Here is a example.
		</para>
		<para>
			<programlisting>
#include &lt;rlib.h&gt;

char *query ="SELECT * FROM plu";
rlib *r;

r =	rlib_init();
rlib_add_datasource_mysql(r, "mysql", "localhost", "user", "password", "database");
rlib_add_query_as(r, "mysql", query, "woot");
rlib_add_report(r, "report.xml");
rlib_set_output_format(r, $format);
rlib_execute(r);
rlib_spool(r);			
rlib_free(r);			
			</programlisting>
		</para>
	</sect1>
</chapter>
